pp#!/usr/bin/env roseus

(defun react-to-face (point-msg bumper)
  (let ((x (send point-msg :x)))
    (describe bumper)
    (cond
     ((= (send bumper :state) 1)
      (return-from react-to-face t))
     ((= x 0) 
      (send *ri* :go-pos 0 0 10)
      (send *ri* :wait-interpolation)
      (return-from react-to-face nil))
     ((< x 100) 
      (send *ri* :go-pos 0 0 30)
      (send *ri* :wait-interpolation))
     ((< x 200) 
      (send *ri* :go-pos 0 0 20)
      (send *ri* :wait-interpolation))
     ((< x 300) 
      (send *ri* :go-pos 0 0 10)
      (send *ri* :wait-interpolation))
     ((< x 350) 
      (send *ri* :go-pos 0 0 5)
      (send *ri* :wait-interpolation))
     ((< x 400) 
      (send *ri* :go-pos 0 0 -5)
      (send *ri* :wait-interpolation))
     ((< x 500) 
      (send *ri* :go-pos 0 0 -10)
      (send *ri* :wait-interpolation))
     ((< x 600) 
      (send *ri* :go-pos 0 0 -20)
      (send *ri* :wait-interpolation))
     ((< x 700) 
      (send *ri* :go-pos 0 0 -30)
      (send *ri* :wait-interpolation))
     (t (return-from react-to-face nil)))
    (send *ri* :go-pos 0.005 0 0)
    (send *ri* :wait-interpolation)
    nil)
  )

